import System.IO
import System.Text
import System.Linq
import System.Linq.Enumerable
import System.Collections.Generic
import file from Web.Bake

Global(
	Project : "PrgData",
	humanReadableName : "Служба подготовки данных",
	deployTo : """\\adc.analit.net\Inforoom\WebApps\PrgDataService\PrgData\""",
	Platform : "x64",
	Profile: @catalog,
	AdditionalAssemblies: ("PrgData.Common", )
)

task @default, [@Build]

task @Build, [@BuildWebSite]

task @deploy, [@DeployPipeline]

desc """
Формируем файлы миграций для удаления неиспользуемых правил автообновления AnalitF
"""
task @DeleteOldVersionsMigration:
	#выбираем список используемых версий
	usedVersions = Db.Read("""
SELECT uuu.AFAPPVERSION
FROM
	usersettings.userupdateinfo  uuu
	inner join customers.Users u on U.Id = uuu.UserId
	inner join usersettings.RetClientsSet r on r.ClientCode = u.ClientId and r.ServiceClient = 0
WHERE uuu.UpdateDate > curdate() - INTERVAL 3 MONTH GROUP BY uuu.AFAPPVERSION order by AFAPPVERSION""").Select({r| r.AFAPPVERSION.ToString()}).ToList()
	print "кол-во используемых версий = ${usedVersions.Count}"
	print "список используемых версий = ${join(usedVersions)}"
	#выбираем список правил обновления
	versions = Db.Read("select * from usersettings.AnalitFVersionRules order by SourceVersion, DestinationVersion").ToList()
	print "кол-во существующих правил = ${versions.Count}"
	#printVersions = versions.Select({r| "(${r.Id}, ${r.SourceVersion}, ${r.DestinationVersion})"}).ToArray()
	#print "versions = ${join(printVersions)}"
	#значение максимальной версии в правилах обновления
	lastVersion = versions.OrderByDescending({v|v.DestinationVersion}).FirstOrDefault().DestinationVersion
	print "максимальная версия в правилах обновления: ${lastVersion}"
	#создаем список правил обновления с записями, которые будут использоваться
	versionForUpdate = List[of DuckRecord]()
	for version as string in usedVersions:
		#для каждой версии из списка используемых версий определяем цепочку правил обновления на максимально доступную версию
		#print "create list for ${version}"
		checkVersion = version
		maxVersion = versions[0]
		while (maxVersion):
			maxVersion = versions.Where({v| v.SourceVersion.ToString() == checkVersion}).OrderByDescending({v|v.DestinationVersion}).FirstOrDefault()
			if (maxVersion):
				if (not versionForUpdate.Contains(maxVersion)):
					print "для версии ${checkVersion} есть правило (${maxVersion.Id}, ${maxVersion.SourceVersion}, ${maxVersion.DestinationVersion})"
					versionForUpdate.Add(maxVersion)
				checkVersion = maxVersion.DestinationVersion.ToString()
			else:
				if (lastVersion.ToString() != checkVersion):
					print "для версии ${checkVersion} правил не найдено"
	nonUsedVersion = List[of string]()
	builderDelete = StringBuilder()
	builderRollback = StringBuilder()
	deletedCount = 0
	for deleteVersion as DuckRecord in versions:
		if (deleteVersion.Id > 0):
			if (not versionForUpdate.Contains(deleteVersion)):
				if (not usedVersions.Contains(deleteVersion.SourceVersion.ToString()) and not nonUsedVersion.Contains(deleteVersion.SourceVersion.ToString())):
					nonUsedVersion.Add(deleteVersion.SourceVersion.ToString())
				if (not usedVersions.Contains(deleteVersion.DestinationVersion.ToString()) and not nonUsedVersion.Contains(deleteVersion.DestinationVersion.ToString()) and not versionForUpdate.Any({v| v.SourceVersion == deleteVersion.DestinationVersion or v.DestinationVersion == deleteVersion.DestinationVersion})):
					nonUsedVersion.Add(deleteVersion.DestinationVersion.ToString())
				#если правило не попало в список
				deletedCount++
				#print "version for delete (${deleteVersion.Id}, ${deleteVersion.SourceVersion}, ${deleteVersion.DestinationVersion})"
				builderDelete.AppendLine("#delete (${deleteVersion.Id}, ${deleteVersion.SourceVersion}, ${deleteVersion.DestinationVersion})")
				builderDelete.AppendLine("delete from usersettings.analitfversionrules where Id = ${deleteVersion.Id};")
				builderRollback.AppendLine("insert into usersettings.analitfversionrules (Id, SourceVersion, DestinationVersion) values (${deleteVersion.Id}, ${deleteVersion.SourceVersion}, ${deleteVersion.DestinationVersion});")
	print "кол-во удаляемых правил автообновления: ${deletedCount}"
	File.WriteAllText("migrationDelete.sql", builderDelete.ToString())
	File.WriteAllText("migrationRollback.sql", builderRollback.ToString())
	print "кол-во версий, которые не используются в правилах = ${nonUsedVersion.Count}"
	print "список версий, которые не используются в правилах = ${join(nonUsedVersion)}"
