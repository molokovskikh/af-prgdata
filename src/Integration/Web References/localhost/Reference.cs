//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Integration.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PrgDataExSoap12", Namespace="IOS.Service")]
    public partial class PrgDataEx : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendLetterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback MaxSynonymCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetArchivedOrdersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostOrder2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PostOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostSomeOrdersOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostSomeOrdersWithSupplierPriceMarkupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPasswordsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostPriceDataSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReclameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReclameCompleteOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PrgDataEx() {
            this.SoapVersion = System.Web.Services.Protocols.SoapProtocolVersion.Soap12;
            this.Url = global::Integration.Properties.Settings.Default.Integration_localhost_PrgDataEx;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendLetterCompletedEventHandler SendLetterCompleted;
        
        /// <remarks/>
        public event GetInfoCompletedEventHandler GetInfoCompleted;
        
        /// <remarks/>
        public event GetUserDataCompletedEventHandler GetUserDataCompleted;
        
        /// <remarks/>
        public event MaxSynonymCodeCompletedEventHandler MaxSynonymCodeCompleted;
        
        /// <remarks/>
        public event GetArchivedOrdersListCompletedEventHandler GetArchivedOrdersListCompleted;
        
        /// <remarks/>
        public event PostOrder2CompletedEventHandler PostOrder2Completed;
        
        /// <remarks/>
        public event PostOrderCompletedEventHandler PostOrderCompleted;
        
        /// <remarks/>
        public event PostSomeOrdersCompletedEventHandler PostSomeOrdersCompleted;
        
        /// <remarks/>
        public event PostSomeOrdersWithSupplierPriceMarkupCompletedEventHandler PostSomeOrdersWithSupplierPriceMarkupCompleted;
        
        /// <remarks/>
        public event GetPasswordsCompletedEventHandler GetPasswordsCompleted;
        
        /// <remarks/>
        public event PostPriceDataSettingsCompletedEventHandler PostPriceDataSettingsCompleted;
        
        /// <remarks/>
        public event GetReclameCompletedEventHandler GetReclameCompleted;
        
        /// <remarks/>
        public event ReclameCompleteCompletedEventHandler ReclameCompleteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/SendLetter", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendLetter(string subject, string body, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] attachment) {
            object[] results = this.Invoke("SendLetter", new object[] {
                        subject,
                        body,
                        attachment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendLetterAsync(string subject, string body, byte[] attachment) {
            this.SendLetterAsync(subject, body, attachment, null);
        }
        
        /// <remarks/>
        public void SendLetterAsync(string subject, string body, byte[] attachment, object userState) {
            if ((this.SendLetterOperationCompleted == null)) {
                this.SendLetterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendLetterOperationCompleted);
            }
            this.InvokeAsync("SendLetter", new object[] {
                        subject,
                        body,
                        attachment}, this.SendLetterOperationCompleted, userState);
        }
        
        private void OnSendLetterOperationCompleted(object arg) {
            if ((this.SendLetterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendLetterCompleted(this, new SendLetterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/GetInfo", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetInfo(string[] LibraryName, string[] LibraryVersion, string[] LibraryHash) {
            object[] results = this.Invoke("GetInfo", new object[] {
                        LibraryName,
                        LibraryVersion,
                        LibraryHash});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoAsync(string[] LibraryName, string[] LibraryVersion, string[] LibraryHash) {
            this.GetInfoAsync(LibraryName, LibraryVersion, LibraryHash, null);
        }
        
        /// <remarks/>
        public void GetInfoAsync(string[] LibraryName, string[] LibraryVersion, string[] LibraryHash, object userState) {
            if ((this.GetInfoOperationCompleted == null)) {
                this.GetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoOperationCompleted);
            }
            this.InvokeAsync("GetInfo", new object[] {
                        LibraryName,
                        LibraryVersion,
                        LibraryHash}, this.GetInfoOperationCompleted, userState);
        }
        
        private void OnGetInfoOperationCompleted(object arg) {
            if ((this.GetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/GetUserData", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserData(System.DateTime AccessTime, bool GetEtalonData, string EXEVersion, short MDBVersion, string UniqueID, string WINVersion, string WINDesc, bool WayBillsOnly) {
            object[] results = this.Invoke("GetUserData", new object[] {
                        AccessTime,
                        GetEtalonData,
                        EXEVersion,
                        MDBVersion,
                        UniqueID,
                        WINVersion,
                        WINDesc,
                        WayBillsOnly});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserDataAsync(System.DateTime AccessTime, bool GetEtalonData, string EXEVersion, short MDBVersion, string UniqueID, string WINVersion, string WINDesc, bool WayBillsOnly) {
            this.GetUserDataAsync(AccessTime, GetEtalonData, EXEVersion, MDBVersion, UniqueID, WINVersion, WINDesc, WayBillsOnly, null);
        }
        
        /// <remarks/>
        public void GetUserDataAsync(System.DateTime AccessTime, bool GetEtalonData, string EXEVersion, short MDBVersion, string UniqueID, string WINVersion, string WINDesc, bool WayBillsOnly, object userState) {
            if ((this.GetUserDataOperationCompleted == null)) {
                this.GetUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserDataOperationCompleted);
            }
            this.InvokeAsync("GetUserData", new object[] {
                        AccessTime,
                        GetEtalonData,
                        EXEVersion,
                        MDBVersion,
                        UniqueID,
                        WINVersion,
                        WINDesc,
                        WayBillsOnly}, this.GetUserDataOperationCompleted, userState);
        }
        
        private void OnGetUserDataOperationCompleted(object arg) {
            if ((this.GetUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserDataCompleted(this, new GetUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/MaxSynonymCode", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime MaxSynonymCode(string Log, uint[] PriceCode, uint UpdateId, bool WayBillsOnly) {
            object[] results = this.Invoke("MaxSynonymCode", new object[] {
                        Log,
                        PriceCode,
                        UpdateId,
                        WayBillsOnly});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void MaxSynonymCodeAsync(string Log, uint[] PriceCode, uint UpdateId, bool WayBillsOnly) {
            this.MaxSynonymCodeAsync(Log, PriceCode, UpdateId, WayBillsOnly, null);
        }
        
        /// <remarks/>
        public void MaxSynonymCodeAsync(string Log, uint[] PriceCode, uint UpdateId, bool WayBillsOnly, object userState) {
            if ((this.MaxSynonymCodeOperationCompleted == null)) {
                this.MaxSynonymCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMaxSynonymCodeOperationCompleted);
            }
            this.InvokeAsync("MaxSynonymCode", new object[] {
                        Log,
                        PriceCode,
                        UpdateId,
                        WayBillsOnly}, this.MaxSynonymCodeOperationCompleted, userState);
        }
        
        private void OnMaxSynonymCodeOperationCompleted(object arg) {
            if ((this.MaxSynonymCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MaxSynonymCodeCompleted(this, new MaxSynonymCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/GetArchivedOrdersList", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetArchivedOrdersList() {
            object[] results = this.Invoke("GetArchivedOrdersList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetArchivedOrdersListAsync() {
            this.GetArchivedOrdersListAsync(null);
        }
        
        /// <remarks/>
        public void GetArchivedOrdersListAsync(object userState) {
            if ((this.GetArchivedOrdersListOperationCompleted == null)) {
                this.GetArchivedOrdersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetArchivedOrdersListOperationCompleted);
            }
            this.InvokeAsync("GetArchivedOrdersList", new object[0], this.GetArchivedOrdersListOperationCompleted, userState);
        }
        
        private void OnGetArchivedOrdersListOperationCompleted(object arg) {
            if ((this.GetArchivedOrdersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetArchivedOrdersListCompleted(this, new GetArchivedOrdersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/PostOrder2", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostOrder2(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode) {
            object[] results = this.Invoke("PostOrder2", new object[] {
                        UniqueID,
                        ServerOrderId,
                        ClientCode,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ProductID,
                        ClientOrderID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Quantity,
                        Junk,
                        Await,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostOrder2Async(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode) {
            this.PostOrder2Async(UniqueID, ServerOrderId, ClientCode, PriceCode, RegionCode, PriceDate, ClientAddition, RowCount, ProductID, ClientOrderID, CodeFirmCr, SynonymCode, SynonymFirmCrCode, Code, CodeCr, Quantity, Junk, Await, Cost, MinCost, MinPriceCode, LeaderMinCost, LeaderMinPriceCode, null);
        }
        
        /// <remarks/>
        public void PostOrder2Async(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode, 
                    object userState) {
            if ((this.PostOrder2OperationCompleted == null)) {
                this.PostOrder2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostOrder2OperationCompleted);
            }
            this.InvokeAsync("PostOrder2", new object[] {
                        UniqueID,
                        ServerOrderId,
                        ClientCode,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ProductID,
                        ClientOrderID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Quantity,
                        Junk,
                        Await,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode}, this.PostOrder2OperationCompleted, userState);
        }
        
        private void OnPostOrder2OperationCompleted(object arg) {
            if ((this.PostOrder2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostOrder2Completed(this, new PostOrder2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/PostOrder", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostOrder(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    string[] LeaderMinPriceCode) {
            object[] results = this.Invoke("PostOrder", new object[] {
                        UniqueID,
                        ServerOrderId,
                        ClientCode,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ProductID,
                        ClientOrderID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Quantity,
                        Junk,
                        Await,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        LeaderMinPriceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostOrderAsync(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    string[] LeaderMinPriceCode) {
            this.PostOrderAsync(UniqueID, ServerOrderId, ClientCode, PriceCode, RegionCode, PriceDate, ClientAddition, RowCount, ProductID, ClientOrderID, CodeFirmCr, SynonymCode, SynonymFirmCrCode, Code, CodeCr, Quantity, Junk, Await, Cost, MinCost, MinPriceCode, LeaderMinCost, RequestRatio, OrderCost, MinOrderCount, LeaderMinPriceCode, null);
        }
        
        /// <remarks/>
        public void PostOrderAsync(
                    string UniqueID, 
                    uint ServerOrderId, 
                    uint ClientCode, 
                    uint PriceCode, 
                    ulong RegionCode, 
                    System.DateTime PriceDate, 
                    string ClientAddition, 
                    ushort RowCount, 
                    uint[] ProductID, 
                    uint ClientOrderID, 
                    string[] CodeFirmCr, 
                    uint[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    ushort[] Quantity, 
                    bool[] Junk, 
                    bool[] Await, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    string[] LeaderMinPriceCode, 
                    object userState) {
            if ((this.PostOrderOperationCompleted == null)) {
                this.PostOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostOrderOperationCompleted);
            }
            this.InvokeAsync("PostOrder", new object[] {
                        UniqueID,
                        ServerOrderId,
                        ClientCode,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ProductID,
                        ClientOrderID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Quantity,
                        Junk,
                        Await,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        LeaderMinPriceCode}, this.PostOrderOperationCompleted, userState);
        }
        
        private void OnPostOrderOperationCompleted(object arg) {
            if ((this.PostOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostOrderCompleted(this, new PostOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/PostSomeOrders", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostSomeOrders(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode) {
            object[] results = this.Invoke("PostSomeOrders", new object[] {
                        UniqueID,
                        ForceSend,
                        UseCorrectOrders,
                        ClientCode,
                        OrderCount,
                        ClientOrderID,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ClientPositionID,
                        ClientServerCoreID,
                        ProductID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Junk,
                        Await,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        Quantity,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostSomeOrdersAsync(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode) {
            this.PostSomeOrdersAsync(UniqueID, ForceSend, UseCorrectOrders, ClientCode, OrderCount, ClientOrderID, PriceCode, RegionCode, PriceDate, ClientAddition, RowCount, ClientPositionID, ClientServerCoreID, ProductID, CodeFirmCr, SynonymCode, SynonymFirmCrCode, Code, CodeCr, Junk, Await, RequestRatio, OrderCost, MinOrderCount, Quantity, Cost, MinCost, MinPriceCode, LeaderMinCost, LeaderMinPriceCode, null);
        }
        
        /// <remarks/>
        public void PostSomeOrdersAsync(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode, 
                    object userState) {
            if ((this.PostSomeOrdersOperationCompleted == null)) {
                this.PostSomeOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostSomeOrdersOperationCompleted);
            }
            this.InvokeAsync("PostSomeOrders", new object[] {
                        UniqueID,
                        ForceSend,
                        UseCorrectOrders,
                        ClientCode,
                        OrderCount,
                        ClientOrderID,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ClientPositionID,
                        ClientServerCoreID,
                        ProductID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Junk,
                        Await,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        Quantity,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode}, this.PostSomeOrdersOperationCompleted, userState);
        }
        
        private void OnPostSomeOrdersOperationCompleted(object arg) {
            if ((this.PostSomeOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostSomeOrdersCompleted(this, new PostSomeOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/PostSomeOrdersWithSupplierPriceMarkup", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostSomeOrdersWithSupplierPriceMarkup(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode, 
                    string[] SupplierPriceMarkup) {
            object[] results = this.Invoke("PostSomeOrdersWithSupplierPriceMarkup", new object[] {
                        UniqueID,
                        ForceSend,
                        UseCorrectOrders,
                        ClientCode,
                        OrderCount,
                        ClientOrderID,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ClientPositionID,
                        ClientServerCoreID,
                        ProductID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Junk,
                        Await,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        Quantity,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode,
                        SupplierPriceMarkup});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostSomeOrdersWithSupplierPriceMarkupAsync(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode, 
                    string[] SupplierPriceMarkup) {
            this.PostSomeOrdersWithSupplierPriceMarkupAsync(UniqueID, ForceSend, UseCorrectOrders, ClientCode, OrderCount, ClientOrderID, PriceCode, RegionCode, PriceDate, ClientAddition, RowCount, ClientPositionID, ClientServerCoreID, ProductID, CodeFirmCr, SynonymCode, SynonymFirmCrCode, Code, CodeCr, Junk, Await, RequestRatio, OrderCost, MinOrderCount, Quantity, Cost, MinCost, MinPriceCode, LeaderMinCost, LeaderMinPriceCode, SupplierPriceMarkup, null);
        }
        
        /// <remarks/>
        public void PostSomeOrdersWithSupplierPriceMarkupAsync(
                    string UniqueID, 
                    bool ForceSend, 
                    bool UseCorrectOrders, 
                    uint ClientCode, 
                    ushort OrderCount, 
                    ulong[] ClientOrderID, 
                    ulong[] PriceCode, 
                    ulong[] RegionCode, 
                    System.DateTime[] PriceDate, 
                    string[] ClientAddition, 
                    ushort[] RowCount, 
                    ulong[] ClientPositionID, 
                    ulong[] ClientServerCoreID, 
                    ulong[] ProductID, 
                    string[] CodeFirmCr, 
                    ulong[] SynonymCode, 
                    string[] SynonymFirmCrCode, 
                    string[] Code, 
                    string[] CodeCr, 
                    bool[] Junk, 
                    bool[] Await, 
                    string[] RequestRatio, 
                    string[] OrderCost, 
                    string[] MinOrderCount, 
                    ushort[] Quantity, 
                    decimal[] Cost, 
                    string[] MinCost, 
                    string[] MinPriceCode, 
                    string[] LeaderMinCost, 
                    string[] LeaderMinPriceCode, 
                    string[] SupplierPriceMarkup, 
                    object userState) {
            if ((this.PostSomeOrdersWithSupplierPriceMarkupOperationCompleted == null)) {
                this.PostSomeOrdersWithSupplierPriceMarkupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostSomeOrdersWithSupplierPriceMarkupOperationCompleted);
            }
            this.InvokeAsync("PostSomeOrdersWithSupplierPriceMarkup", new object[] {
                        UniqueID,
                        ForceSend,
                        UseCorrectOrders,
                        ClientCode,
                        OrderCount,
                        ClientOrderID,
                        PriceCode,
                        RegionCode,
                        PriceDate,
                        ClientAddition,
                        RowCount,
                        ClientPositionID,
                        ClientServerCoreID,
                        ProductID,
                        CodeFirmCr,
                        SynonymCode,
                        SynonymFirmCrCode,
                        Code,
                        CodeCr,
                        Junk,
                        Await,
                        RequestRatio,
                        OrderCost,
                        MinOrderCount,
                        Quantity,
                        Cost,
                        MinCost,
                        MinPriceCode,
                        LeaderMinCost,
                        LeaderMinPriceCode,
                        SupplierPriceMarkup}, this.PostSomeOrdersWithSupplierPriceMarkupOperationCompleted, userState);
        }
        
        private void OnPostSomeOrdersWithSupplierPriceMarkupOperationCompleted(object arg) {
            if ((this.PostSomeOrdersWithSupplierPriceMarkupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostSomeOrdersWithSupplierPriceMarkupCompleted(this, new PostSomeOrdersWithSupplierPriceMarkupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/GetPasswords", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPasswords(string UniqueID) {
            object[] results = this.Invoke("GetPasswords", new object[] {
                        UniqueID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPasswordsAsync(string UniqueID) {
            this.GetPasswordsAsync(UniqueID, null);
        }
        
        /// <remarks/>
        public void GetPasswordsAsync(string UniqueID, object userState) {
            if ((this.GetPasswordsOperationCompleted == null)) {
                this.GetPasswordsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordsOperationCompleted);
            }
            this.InvokeAsync("GetPasswords", new object[] {
                        UniqueID}, this.GetPasswordsOperationCompleted, userState);
        }
        
        private void OnGetPasswordsOperationCompleted(object arg) {
            if ((this.GetPasswordsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordsCompleted(this, new GetPasswordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/PostPriceDataSettings", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostPriceDataSettings(string UniqueID, int[] PriceCodes, long[] RegionCodes, bool[] INJobs) {
            object[] results = this.Invoke("PostPriceDataSettings", new object[] {
                        UniqueID,
                        PriceCodes,
                        RegionCodes,
                        INJobs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostPriceDataSettingsAsync(string UniqueID, int[] PriceCodes, long[] RegionCodes, bool[] INJobs) {
            this.PostPriceDataSettingsAsync(UniqueID, PriceCodes, RegionCodes, INJobs, null);
        }
        
        /// <remarks/>
        public void PostPriceDataSettingsAsync(string UniqueID, int[] PriceCodes, long[] RegionCodes, bool[] INJobs, object userState) {
            if ((this.PostPriceDataSettingsOperationCompleted == null)) {
                this.PostPriceDataSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostPriceDataSettingsOperationCompleted);
            }
            this.InvokeAsync("PostPriceDataSettings", new object[] {
                        UniqueID,
                        PriceCodes,
                        RegionCodes,
                        INJobs}, this.PostPriceDataSettingsOperationCompleted, userState);
        }
        
        private void OnPostPriceDataSettingsOperationCompleted(object arg) {
            if ((this.PostPriceDataSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostPriceDataSettingsCompleted(this, new PostPriceDataSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/GetReclame", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReclame() {
            object[] results = this.Invoke("GetReclame", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReclameAsync() {
            this.GetReclameAsync(null);
        }
        
        /// <remarks/>
        public void GetReclameAsync(object userState) {
            if ((this.GetReclameOperationCompleted == null)) {
                this.GetReclameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReclameOperationCompleted);
            }
            this.InvokeAsync("GetReclame", new object[0], this.GetReclameOperationCompleted, userState);
        }
        
        private void OnGetReclameOperationCompleted(object arg) {
            if ((this.GetReclameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReclameCompleted(this, new GetReclameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("IOS.Service/ReclameComplete", RequestNamespace="IOS.Service", ResponseNamespace="IOS.Service", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ReclameComplete() {
            object[] results = this.Invoke("ReclameComplete", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ReclameCompleteAsync() {
            this.ReclameCompleteAsync(null);
        }
        
        /// <remarks/>
        public void ReclameCompleteAsync(object userState) {
            if ((this.ReclameCompleteOperationCompleted == null)) {
                this.ReclameCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReclameCompleteOperationCompleted);
            }
            this.InvokeAsync("ReclameComplete", new object[0], this.ReclameCompleteOperationCompleted, userState);
        }
        
        private void OnReclameCompleteOperationCompleted(object arg) {
            if ((this.ReclameCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReclameCompleteCompleted(this, new ReclameCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendLetterCompletedEventHandler(object sender, SendLetterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendLetterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendLetterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInfoCompletedEventHandler(object sender, GetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserDataCompletedEventHandler(object sender, GetUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MaxSynonymCodeCompletedEventHandler(object sender, MaxSynonymCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MaxSynonymCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MaxSynonymCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetArchivedOrdersListCompletedEventHandler(object sender, GetArchivedOrdersListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetArchivedOrdersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetArchivedOrdersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostOrder2CompletedEventHandler(object sender, PostOrder2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostOrder2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostOrder2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostOrderCompletedEventHandler(object sender, PostOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostSomeOrdersCompletedEventHandler(object sender, PostSomeOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostSomeOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostSomeOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostSomeOrdersWithSupplierPriceMarkupCompletedEventHandler(object sender, PostSomeOrdersWithSupplierPriceMarkupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostSomeOrdersWithSupplierPriceMarkupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostSomeOrdersWithSupplierPriceMarkupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPasswordsCompletedEventHandler(object sender, GetPasswordsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPasswordsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostPriceDataSettingsCompletedEventHandler(object sender, PostPriceDataSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostPriceDataSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostPriceDataSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReclameCompletedEventHandler(object sender, GetReclameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReclameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReclameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReclameCompleteCompletedEventHandler(object sender, ReclameCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReclameCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReclameCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591